/*
 * Created on 23 Mï¿½r 2018 ( Time 23:37:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.adams.geo.gisweb.business.service.mapping.LandschaftselementServiceMapper;
import org.adams.geo.gisweb.context.junit4.SpringWithJNDIRunner;
import org.adams.geo.gisweb.data.dto.Landschaftselement;
import org.adams.geo.gisweb.data.entities.LandschaftselementEntity;
import org.adams.geo.gisweb.data.repository.LandschaftselementRepository;
import org.adams.geo.gisweb.test.LandschaftselementEntityFactoryForTest;
import org.adams.geo.gisweb.test.LandschaftselementFactoryForTest;
import org.adams.geo.gisweb.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;

/**
 * Test : Implementation of LandschaftselementService
 */
@RunWith(SpringWithJNDIRunner.class)
public class LandschaftselementServiceImplTest {

	@InjectMocks
	private LandschaftselementServiceImpl landschaftselementService;
	@Mock
	private LandschaftselementRepository landschaftselementJpaRepository;
	@Mock
	private LandschaftselementServiceMapper landschaftselementServiceMapper;

	private LandschaftselementFactoryForTest landschaftselementFactoryForTest = new LandschaftselementFactoryForTest();

	private LandschaftselementEntityFactoryForTest landschaftselementEntityFactoryForTest = new LandschaftselementEntityFactoryForTest();

	private MockValues mockValues = new MockValues();

	@Test
	public void findById() {
		// Given
		Integer gid = mockValues.nextInteger();

		LandschaftselementEntity landschaftselementEntity = landschaftselementJpaRepository.findOne(gid);

		Landschaftselement landschaftselement = landschaftselementFactoryForTest.newLandschaftselement();
		when(landschaftselementServiceMapper.mapLandschaftselementEntityToLandschaftselement(landschaftselementEntity))
				.thenReturn(landschaftselement);

		// When
		Landschaftselement landschaftselementFound = landschaftselementService.findById(gid);

		// Then
		assertEquals(landschaftselement.getGid(), landschaftselementFound.getGid());
	}

	@Test
	public void findAll() {
		// Given
		List<LandschaftselementEntity> landschaftselementEntitys = new ArrayList<>();
		LandschaftselementEntity landschaftselementEntity1 = landschaftselementEntityFactoryForTest
				.newLandschaftselementEntity();
		landschaftselementEntitys.add(landschaftselementEntity1);
		LandschaftselementEntity landschaftselementEntity2 = landschaftselementEntityFactoryForTest
				.newLandschaftselementEntity();
		landschaftselementEntitys.add(landschaftselementEntity2);
		when(landschaftselementJpaRepository.findAll()).thenReturn(landschaftselementEntitys);

		Landschaftselement landschaftselement1 = landschaftselementFactoryForTest.newLandschaftselement();
		when(landschaftselementServiceMapper.mapLandschaftselementEntityToLandschaftselement(landschaftselementEntity1))
				.thenReturn(landschaftselement1);
		Landschaftselement landschaftselement2 = landschaftselementFactoryForTest.newLandschaftselement();
		when(landschaftselementServiceMapper.mapLandschaftselementEntityToLandschaftselement(landschaftselementEntity2))
				.thenReturn(landschaftselement2);

		// When
		List<Landschaftselement> landschaftselementsFounds = landschaftselementService.findAll();

		// Then
		assertTrue(landschaftselement1 == landschaftselementsFounds.get(0));
		assertTrue(landschaftselement2 == landschaftselementsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Landschaftselement landschaftselement = landschaftselementFactoryForTest.newLandschaftselement();

		LandschaftselementEntity landschaftselementEntity = landschaftselementEntityFactoryForTest
				.newLandschaftselementEntity();
		when(landschaftselementJpaRepository.findOne(landschaftselement.getGid())).thenReturn(null);

		landschaftselementEntity = new LandschaftselementEntity();
		landschaftselementServiceMapper.mapLandschaftselementToLandschaftselementEntity(landschaftselement,
				landschaftselementEntity);
		LandschaftselementEntity landschaftselementEntitySaved = landschaftselementJpaRepository
				.save(landschaftselementEntity);

		Landschaftselement landschaftselementSaved = landschaftselementFactoryForTest.newLandschaftselement();
		when(landschaftselementServiceMapper
				.mapLandschaftselementEntityToLandschaftselement(landschaftselementEntitySaved))
						.thenReturn(landschaftselementSaved);

		// When
		Landschaftselement landschaftselementResult = landschaftselementService.create(landschaftselement);

		// Then
		assertTrue(landschaftselementResult == landschaftselementSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Landschaftselement landschaftselement = landschaftselementFactoryForTest.newLandschaftselement();

		LandschaftselementEntity landschaftselementEntity = landschaftselementEntityFactoryForTest
				.newLandschaftselementEntity();
		when(landschaftselementJpaRepository.findOne(landschaftselement.getGid())).thenReturn(landschaftselementEntity);

		// When
		Exception exception = null;
		try {
			landschaftselementService.create(landschaftselement);
		} catch (Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Landschaftselement landschaftselement = landschaftselementFactoryForTest.newLandschaftselement();

		LandschaftselementEntity landschaftselementEntity = landschaftselementEntityFactoryForTest
				.newLandschaftselementEntity();
		when(landschaftselementJpaRepository.findOne(landschaftselement.getGid())).thenReturn(landschaftselementEntity);

		LandschaftselementEntity landschaftselementEntitySaved = landschaftselementEntityFactoryForTest
				.newLandschaftselementEntity();
		when(landschaftselementJpaRepository.save(landschaftselementEntity)).thenReturn(landschaftselementEntitySaved);

		Landschaftselement landschaftselementSaved = landschaftselementFactoryForTest.newLandschaftselement();
		when(landschaftselementServiceMapper
				.mapLandschaftselementEntityToLandschaftselement(landschaftselementEntitySaved))
						.thenReturn(landschaftselementSaved);

		// When
		Landschaftselement landschaftselementResult = landschaftselementService.update(landschaftselement);

		// Then
		verify(landschaftselementServiceMapper).mapLandschaftselementToLandschaftselementEntity(landschaftselement,
				landschaftselementEntity);
		assertTrue(landschaftselementResult == landschaftselementSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer gid = mockValues.nextInteger();

		// When
		landschaftselementService.delete(gid);

		// Then
		verify(landschaftselementJpaRepository).delete(gid);

	}

}
