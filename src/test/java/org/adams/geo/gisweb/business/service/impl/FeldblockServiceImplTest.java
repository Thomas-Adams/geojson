/*
 * Created on 23 Mï¿½r 2018 ( Time 23:37:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.adams.geo.gisweb.business.service.mapping.FeldblockServiceMapper;
import org.adams.geo.gisweb.context.junit4.SpringWithJNDIRunner;
import org.adams.geo.gisweb.data.dto.Feldblock;
import org.adams.geo.gisweb.data.entities.FeldblockEntity;
import org.adams.geo.gisweb.data.repository.FeldblockRepository;
import org.adams.geo.gisweb.test.FeldblockEntityFactoryForTest;
import org.adams.geo.gisweb.test.FeldblockFactoryForTest;
import org.adams.geo.gisweb.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;

/**
 * Test : Implementation of FeldblockService
 */
@RunWith(SpringWithJNDIRunner.class)
public class FeldblockServiceImplTest {

	@InjectMocks
	private FeldblockServiceImpl feldblockService;
	@Mock
	private FeldblockRepository feldblockRepository;
	@Mock
	private FeldblockServiceMapper feldblockServiceMapper;

	private FeldblockFactoryForTest feldblockFactoryForTest = new FeldblockFactoryForTest();

	private FeldblockEntityFactoryForTest feldblockEntityFactoryForTest = new FeldblockEntityFactoryForTest();

	private MockValues mockValues = new MockValues();

	@Test
	public void findById() {
		// Given
		Integer gid = mockValues.nextInteger();

		FeldblockEntity feldblockEntity = feldblockRepository.findOne(gid);

		Feldblock feldblock = feldblockFactoryForTest.newFeldblock();
		when(feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntity)).thenReturn(feldblock);

		// When
		Feldblock feldblockFound = feldblockService.findById(gid);

		// Then
		assertEquals(feldblock.getGid(), feldblockFound.getGid());
	}

	@Test
	public void findAll() {
		// Given
		List<FeldblockEntity> feldblockEntitys = new ArrayList<>();
		FeldblockEntity feldblockEntity1 = feldblockEntityFactoryForTest.newFeldblockEntity();
		feldblockEntitys.add(feldblockEntity1);
		FeldblockEntity feldblockEntity2 = feldblockEntityFactoryForTest.newFeldblockEntity();
		feldblockEntitys.add(feldblockEntity2);
		when(feldblockRepository.findAll()).thenReturn(feldblockEntitys);

		Feldblock feldblock1 = feldblockFactoryForTest.newFeldblock();
		when(feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntity1)).thenReturn(feldblock1);
		Feldblock feldblock2 = feldblockFactoryForTest.newFeldblock();
		when(feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntity2)).thenReturn(feldblock2);

		// When
		List<Feldblock> feldblocksFounds = feldblockService.findAll();

		// Then
		assertTrue(feldblock1 == feldblocksFounds.get(0));
		assertTrue(feldblock2 == feldblocksFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Feldblock feldblock = feldblockFactoryForTest.newFeldblock();

		FeldblockEntity feldblockEntity = feldblockEntityFactoryForTest.newFeldblockEntity();
		when(feldblockRepository.findOne(feldblock.getGid())).thenReturn(null);

		feldblockEntity = new FeldblockEntity();
		feldblockServiceMapper.mapFeldblockToFeldblockEntity(feldblock, feldblockEntity);
		FeldblockEntity feldblockEntitySaved = feldblockRepository.save(feldblockEntity);

		Feldblock feldblockSaved = feldblockFactoryForTest.newFeldblock();
		when(feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntitySaved)).thenReturn(feldblockSaved);

		// When
		Feldblock feldblockResult = feldblockService.create(feldblock);

		// Then
		assertTrue(feldblockResult == feldblockSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Feldblock feldblock = feldblockFactoryForTest.newFeldblock();

		FeldblockEntity feldblockEntity = feldblockEntityFactoryForTest.newFeldblockEntity();
		when(feldblockRepository.findOne(feldblock.getGid())).thenReturn(feldblockEntity);

		// When
		Exception exception = null;
		try {
			feldblockService.create(feldblock);
		} catch (Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Feldblock feldblock = feldblockFactoryForTest.newFeldblock();

		FeldblockEntity feldblockEntity = feldblockEntityFactoryForTest.newFeldblockEntity();
		when(feldblockRepository.findOne(feldblock.getGid())).thenReturn(feldblockEntity);

		FeldblockEntity feldblockEntitySaved = feldblockEntityFactoryForTest.newFeldblockEntity();
		when(feldblockRepository.save(feldblockEntity)).thenReturn(feldblockEntitySaved);

		Feldblock feldblockSaved = feldblockFactoryForTest.newFeldblock();
		when(feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntitySaved)).thenReturn(feldblockSaved);

		// When
		Feldblock feldblockResult = feldblockService.update(feldblock);

		// Then
		verify(feldblockServiceMapper).mapFeldblockToFeldblockEntity(feldblock, feldblockEntity);
		assertTrue(feldblockResult == feldblockSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer gid = mockValues.nextInteger();

		// When
		feldblockService.delete(gid);

		// Then
		verify(feldblockRepository).delete(gid);

	}

}
