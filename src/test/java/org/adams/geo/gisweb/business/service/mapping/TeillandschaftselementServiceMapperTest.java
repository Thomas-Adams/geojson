/*
 * Created on 23 Mï¿½r 2018 ( Time 23:37:27 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.adams.geo.gisweb.data.dto.Teillandschaftselement;
import org.adams.geo.gisweb.data.entities.TeillandschaftselementEntity;
import org.adams.geo.gisweb.test.MockValues;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TeillandschaftselementServiceMapperTest {

	private TeillandschaftselementServiceMapper teillandschaftselementServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();

	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	@Before
	public void before() {
		teillandschaftselementServiceMapper = new TeillandschaftselementServiceMapper();
		teillandschaftselementServiceMapper.setModelMapper(modelMapper);
	}

	/**
	 * Mapping from 'TeillandschaftselementEntity' to 'Teillandschaftselement'
	 *
	 * @param teillandschaftselementEntity
	 */
	@Test
	public void testMapTeillandschaftselementEntityToTeillandschaftselement() {
		// Given
		TeillandschaftselementEntity teillandschaftselementEntity = new TeillandschaftselementEntity();
		teillandschaftselementEntity.setFlik(mockValues.nextString(254));
		teillandschaftselementEntity.setFlek(mockValues.nextString(254));
		teillandschaftselementEntity.setNrle(mockValues.nextBigDecimal());
		teillandschaftselementEntity.setSchlagnr(mockValues.nextBigDecimal());
		teillandschaftselementEntity.setGeom(mockValues.nextGeometry());

		// When
		Teillandschaftselement teillandschaftselement = teillandschaftselementServiceMapper
				.mapTeillandschaftselementEntityToTeillandschaftselement(teillandschaftselementEntity);

		// Then
		assertEquals(teillandschaftselementEntity.getFlik(), teillandschaftselement.getFlik());
		assertEquals(teillandschaftselementEntity.getFlek(), teillandschaftselement.getFlek());
		assertEquals(teillandschaftselementEntity.getNrle(), teillandschaftselement.getNrle());
		assertEquals(teillandschaftselementEntity.getSchlagnr(), teillandschaftselement.getSchlagnr());
		assertEquals(teillandschaftselementEntity.getGeom(), teillandschaftselement.getGeom());
	}

	/**
	 * Test : Mapping from 'Teillandschaftselement' to
	 * 'TeillandschaftselementEntity'
	 */
	@Test
	public void testMapTeillandschaftselementToTeillandschaftselementEntity() {
		// Given
		Teillandschaftselement teillandschaftselement = new Teillandschaftselement();
		teillandschaftselement.setFlik(mockValues.nextString(254));
		teillandschaftselement.setFlek(mockValues.nextString(254));
		teillandschaftselement.setNrle(mockValues.nextBigDecimal());
		teillandschaftselement.setSchlagnr(mockValues.nextBigDecimal());
		teillandschaftselement.setGeom(mockValues.nextGeometry());

		TeillandschaftselementEntity teillandschaftselementEntity = new TeillandschaftselementEntity();

		// When
		teillandschaftselementServiceMapper.mapTeillandschaftselementToTeillandschaftselementEntity(
				teillandschaftselement, teillandschaftselementEntity);

		// Then
		assertEquals(teillandschaftselement.getFlik(), teillandschaftselementEntity.getFlik());
		assertEquals(teillandschaftselement.getFlek(), teillandschaftselementEntity.getFlek());
		assertEquals(teillandschaftselement.getNrle(), teillandschaftselementEntity.getNrle());
		assertEquals(teillandschaftselement.getSchlagnr(), teillandschaftselementEntity.getSchlagnr());
		assertEquals(teillandschaftselement.getGeom(), teillandschaftselementEntity.getGeom());
	}

}