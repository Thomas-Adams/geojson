/*
 * Created on 23 Mï¿½r 2018 ( Time 23:37:27 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.adams.geo.gisweb.business.service.mapping.SchlagServiceMapper;
import org.adams.geo.gisweb.context.junit4.SpringWithJNDIRunner;
import org.adams.geo.gisweb.data.dto.Schlag;
import org.adams.geo.gisweb.data.entities.SchlagEntity;
import org.adams.geo.gisweb.data.repository.SchlagRepository;
import org.adams.geo.gisweb.test.MockValues;
import org.adams.geo.gisweb.test.SchlagEntityFactoryForTest;
import org.adams.geo.gisweb.test.SchlagFactoryForTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;

/**
 * Test : Implementation of SchlagService
 */
@RunWith(SpringWithJNDIRunner.class)
public class SchlagServiceImplTest {

	@InjectMocks
	private SchlagServiceImpl schlagService;
	@Mock
	private SchlagRepository schlagJpaRepository;
	@Mock
	private SchlagServiceMapper schlagServiceMapper;

	private SchlagFactoryForTest schlagFactoryForTest = new SchlagFactoryForTest();

	private SchlagEntityFactoryForTest schlagEntityFactoryForTest = new SchlagEntityFactoryForTest();

	private MockValues mockValues = new MockValues();

	@Test
	public void findById() {
		// Given
		Integer gid = mockValues.nextInteger();

		SchlagEntity schlagEntity = schlagJpaRepository.findOne(gid);

		Schlag schlag = schlagFactoryForTest.newSchlag();
		when(schlagServiceMapper.mapSchlagEntityToSchlag(schlagEntity)).thenReturn(schlag);

		// When
		Schlag schlagFound = schlagService.findById(gid);

		// Then
		assertEquals(schlag.getGid(), schlagFound.getGid());
	}

	@Test
	public void findAll() {
		// Given
		List<SchlagEntity> schlagEntitys = new ArrayList<>();
		SchlagEntity schlagEntity1 = schlagEntityFactoryForTest.newSchlagEntity();
		schlagEntitys.add(schlagEntity1);
		SchlagEntity schlagEntity2 = schlagEntityFactoryForTest.newSchlagEntity();
		schlagEntitys.add(schlagEntity2);
		when(schlagJpaRepository.findAll()).thenReturn(schlagEntitys);

		Schlag schlag1 = schlagFactoryForTest.newSchlag();
		when(schlagServiceMapper.mapSchlagEntityToSchlag(schlagEntity1)).thenReturn(schlag1);
		Schlag schlag2 = schlagFactoryForTest.newSchlag();
		when(schlagServiceMapper.mapSchlagEntityToSchlag(schlagEntity2)).thenReturn(schlag2);

		// When
		List<Schlag> schlagsFounds = schlagService.findAll();

		// Then
		assertTrue(schlag1 == schlagsFounds.get(0));
		assertTrue(schlag2 == schlagsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Schlag schlag = schlagFactoryForTest.newSchlag();

		SchlagEntity schlagEntity = schlagEntityFactoryForTest.newSchlagEntity();
		when(schlagJpaRepository.findOne(schlag.getGid())).thenReturn(null);

		schlagEntity = new SchlagEntity();
		schlagServiceMapper.mapSchlagToSchlagEntity(schlag, schlagEntity);
		SchlagEntity schlagEntitySaved = schlagJpaRepository.save(schlagEntity);

		Schlag schlagSaved = schlagFactoryForTest.newSchlag();
		when(schlagServiceMapper.mapSchlagEntityToSchlag(schlagEntitySaved)).thenReturn(schlagSaved);

		// When
		Schlag schlagResult = schlagService.create(schlag);

		// Then
		assertTrue(schlagResult == schlagSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Schlag schlag = schlagFactoryForTest.newSchlag();

		SchlagEntity schlagEntity = schlagEntityFactoryForTest.newSchlagEntity();
		when(schlagJpaRepository.findOne(schlag.getGid())).thenReturn(schlagEntity);

		// When
		Exception exception = null;
		try {
			schlagService.create(schlag);
		} catch (Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Schlag schlag = schlagFactoryForTest.newSchlag();

		SchlagEntity schlagEntity = schlagEntityFactoryForTest.newSchlagEntity();
		when(schlagJpaRepository.findOne(schlag.getGid())).thenReturn(schlagEntity);

		SchlagEntity schlagEntitySaved = schlagEntityFactoryForTest.newSchlagEntity();
		when(schlagJpaRepository.save(schlagEntity)).thenReturn(schlagEntitySaved);

		Schlag schlagSaved = schlagFactoryForTest.newSchlag();
		when(schlagServiceMapper.mapSchlagEntityToSchlag(schlagEntitySaved)).thenReturn(schlagSaved);

		// When
		Schlag schlagResult = schlagService.update(schlag);

		// Then
		verify(schlagServiceMapper).mapSchlagToSchlagEntity(schlag, schlagEntity);
		assertTrue(schlagResult == schlagSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer gid = mockValues.nextInteger();

		// When
		schlagService.delete(gid);

		// Then
		verify(schlagJpaRepository).delete(gid);

	}

}
