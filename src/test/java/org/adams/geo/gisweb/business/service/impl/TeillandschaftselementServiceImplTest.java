/*
 * Created on 23 Mï¿½r 2018 ( Time 23:37:27 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.adams.geo.gisweb.business.service.mapping.TeillandschaftselementServiceMapper;
import org.adams.geo.gisweb.context.junit4.SpringWithJNDIRunner;
import org.adams.geo.gisweb.data.dto.Teillandschaftselement;
import org.adams.geo.gisweb.data.entities.TeillandschaftselementEntity;
import org.adams.geo.gisweb.data.repository.TeillandschaftselementRepository;
import org.adams.geo.gisweb.test.MockValues;
import org.adams.geo.gisweb.test.TeillandschaftselementEntityFactoryForTest;
import org.adams.geo.gisweb.test.TeillandschaftselementFactoryForTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;

/**
 * Test : Implementation of TeillandschaftselementService
 */
@RunWith(SpringWithJNDIRunner.class)
public class TeillandschaftselementServiceImplTest {

	@InjectMocks
	private TeillandschaftselementServiceImpl teillandschaftselementService;
	@Mock
	private TeillandschaftselementRepository teillandschaftselementJpaRepository;
	@Mock
	private TeillandschaftselementServiceMapper teillandschaftselementServiceMapper;

	private TeillandschaftselementFactoryForTest teillandschaftselementFactoryForTest = new TeillandschaftselementFactoryForTest();

	private TeillandschaftselementEntityFactoryForTest teillandschaftselementEntityFactoryForTest = new TeillandschaftselementEntityFactoryForTest();

	private MockValues mockValues = new MockValues();

	@Test
	public void findById() {
		// Given
		Integer gid = mockValues.nextInteger();

		TeillandschaftselementEntity teillandschaftselementEntity = teillandschaftselementJpaRepository.findOne(gid);

		Teillandschaftselement teillandschaftselement = teillandschaftselementFactoryForTest
				.newTeillandschaftselement();
		when(teillandschaftselementServiceMapper
				.mapTeillandschaftselementEntityToTeillandschaftselement(teillandschaftselementEntity))
						.thenReturn(teillandschaftselement);

		// When
		Teillandschaftselement teillandschaftselementFound = teillandschaftselementService.findById(gid);

		// Then
		assertEquals(teillandschaftselement.getGid(), teillandschaftselementFound.getGid());
	}

	@Test
	public void findAll() {
		// Given
		List<TeillandschaftselementEntity> teillandschaftselementEntitys = new ArrayList<>();
		TeillandschaftselementEntity teillandschaftselementEntity1 = teillandschaftselementEntityFactoryForTest
				.newTeillandschaftselementEntity();
		teillandschaftselementEntitys.add(teillandschaftselementEntity1);
		TeillandschaftselementEntity teillandschaftselementEntity2 = teillandschaftselementEntityFactoryForTest
				.newTeillandschaftselementEntity();
		teillandschaftselementEntitys.add(teillandschaftselementEntity2);
		when(teillandschaftselementJpaRepository.findAll()).thenReturn(teillandschaftselementEntitys);

		Teillandschaftselement teillandschaftselement1 = teillandschaftselementFactoryForTest
				.newTeillandschaftselement();
		when(teillandschaftselementServiceMapper
				.mapTeillandschaftselementEntityToTeillandschaftselement(teillandschaftselementEntity1))
						.thenReturn(teillandschaftselement1);
		Teillandschaftselement teillandschaftselement2 = teillandschaftselementFactoryForTest
				.newTeillandschaftselement();
		when(teillandschaftselementServiceMapper
				.mapTeillandschaftselementEntityToTeillandschaftselement(teillandschaftselementEntity2))
						.thenReturn(teillandschaftselement2);

		// When
		List<Teillandschaftselement> teillandschaftselementsFounds = teillandschaftselementService.findAll();

		// Then
		assertTrue(teillandschaftselement1 == teillandschaftselementsFounds.get(0));
		assertTrue(teillandschaftselement2 == teillandschaftselementsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Teillandschaftselement teillandschaftselement = teillandschaftselementFactoryForTest
				.newTeillandschaftselement();

		TeillandschaftselementEntity teillandschaftselementEntity = teillandschaftselementEntityFactoryForTest
				.newTeillandschaftselementEntity();
		when(teillandschaftselementJpaRepository.findOne(teillandschaftselement.getGid())).thenReturn(null);

		teillandschaftselementEntity = new TeillandschaftselementEntity();
		teillandschaftselementServiceMapper.mapTeillandschaftselementToTeillandschaftselementEntity(
				teillandschaftselement, teillandschaftselementEntity);
		TeillandschaftselementEntity teillandschaftselementEntitySaved = teillandschaftselementJpaRepository
				.save(teillandschaftselementEntity);

		Teillandschaftselement teillandschaftselementSaved = teillandschaftselementFactoryForTest
				.newTeillandschaftselement();
		when(teillandschaftselementServiceMapper
				.mapTeillandschaftselementEntityToTeillandschaftselement(teillandschaftselementEntitySaved))
						.thenReturn(teillandschaftselementSaved);

		// When
		Teillandschaftselement teillandschaftselementResult = teillandschaftselementService
				.create(teillandschaftselement);

		// Then
		assertTrue(teillandschaftselementResult == teillandschaftselementSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Teillandschaftselement teillandschaftselement = teillandschaftselementFactoryForTest
				.newTeillandschaftselement();

		TeillandschaftselementEntity teillandschaftselementEntity = teillandschaftselementEntityFactoryForTest
				.newTeillandschaftselementEntity();
		when(teillandschaftselementJpaRepository.findOne(teillandschaftselement.getGid()))
				.thenReturn(teillandschaftselementEntity);

		// When
		Exception exception = null;
		try {
			teillandschaftselementService.create(teillandschaftselement);
		} catch (Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Teillandschaftselement teillandschaftselement = teillandschaftselementFactoryForTest
				.newTeillandschaftselement();

		TeillandschaftselementEntity teillandschaftselementEntity = teillandschaftselementEntityFactoryForTest
				.newTeillandschaftselementEntity();
		when(teillandschaftselementJpaRepository.findOne(teillandschaftselement.getGid()))
				.thenReturn(teillandschaftselementEntity);

		TeillandschaftselementEntity teillandschaftselementEntitySaved = teillandschaftselementEntityFactoryForTest
				.newTeillandschaftselementEntity();
		when(teillandschaftselementJpaRepository.save(teillandschaftselementEntity))
				.thenReturn(teillandschaftselementEntitySaved);

		Teillandschaftselement teillandschaftselementSaved = teillandschaftselementFactoryForTest
				.newTeillandschaftselement();
		when(teillandschaftselementServiceMapper
				.mapTeillandschaftselementEntityToTeillandschaftselement(teillandschaftselementEntitySaved))
						.thenReturn(teillandschaftselementSaved);

		// When
		Teillandschaftselement teillandschaftselementResult = teillandschaftselementService
				.update(teillandschaftselement);

		// Then
		verify(teillandschaftselementServiceMapper).mapTeillandschaftselementToTeillandschaftselementEntity(
				teillandschaftselement, teillandschaftselementEntity);
		assertTrue(teillandschaftselementResult == teillandschaftselementSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer gid = mockValues.nextInteger();

		// When
		teillandschaftselementService.delete(gid);

		// Then
		verify(teillandschaftselementJpaRepository).delete(gid);

	}

}
