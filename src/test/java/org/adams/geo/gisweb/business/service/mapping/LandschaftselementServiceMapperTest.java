/*
 * Created on 23 Mï¿½r 2018 ( Time 23:37:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.adams.geo.gisweb.data.dto.Landschaftselement;
import org.adams.geo.gisweb.data.entities.LandschaftselementEntity;
import org.adams.geo.gisweb.test.MockValues;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class LandschaftselementServiceMapperTest {

	private LandschaftselementServiceMapper landschaftselementServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();

	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	@Before
	public void before() {
		landschaftselementServiceMapper = new LandschaftselementServiceMapper();
		landschaftselementServiceMapper.setModelMapper(modelMapper);
	}

	/**
	 * Mapping from 'LandschaftselementEntity' to 'Landschaftselement'
	 *
	 * @param landschaftselementEntity
	 */
	@Test
	public void testMapLandschaftselementEntityToLandschaftselement() {
		// Given
		LandschaftselementEntity landschaftselementEntity = new LandschaftselementEntity();
		landschaftselementEntity.setFlek(mockValues.nextString(50));
		landschaftselementEntity.setTyp(mockValues.nextShort());
		landschaftselementEntity.setTypTxt(mockValues.nextString(254));
		landschaftselementEntity.setFlaeche(mockValues.nextDouble());
		landschaftselementEntity.setCcRelevan(mockValues.nextShort());
		landschaftselementEntity.setStand(mockValues.nextString(10));
		landschaftselementEntity.setGeom(mockValues.nextGeometry());

		// When
		Landschaftselement landschaftselement = landschaftselementServiceMapper
				.mapLandschaftselementEntityToLandschaftselement(landschaftselementEntity);

		// Then
		assertEquals(landschaftselementEntity.getFlek(), landschaftselement.getFlek());
		assertEquals(landschaftselementEntity.getTyp(), landschaftselement.getTyp());
		assertEquals(landschaftselementEntity.getTypTxt(), landschaftselement.getTypTxt());
		assertEquals(landschaftselementEntity.getFlaeche(), landschaftselement.getFlaeche());
		assertEquals(landschaftselementEntity.getCcRelevan(), landschaftselement.getCcRelevan());
		assertEquals(landschaftselementEntity.getStand(), landschaftselement.getStand());
		assertEquals(landschaftselementEntity.getGeom(), landschaftselement.getGeom());
	}

	/**
	 * Test : Mapping from 'Landschaftselement' to 'LandschaftselementEntity'
	 */
	@Test
	public void testMapLandschaftselementToLandschaftselementEntity() {
		// Given
		Landschaftselement landschaftselement = new Landschaftselement();
		landschaftselement.setFlek(mockValues.nextString(50));
		landschaftselement.setTyp(mockValues.nextShort());
		landschaftselement.setTypTxt(mockValues.nextString(254));
		landschaftselement.setFlaeche(mockValues.nextDouble());
		landschaftselement.setCcRelevan(mockValues.nextShort());
		landschaftselement.setStand(mockValues.nextString(10));
		landschaftselement.setGeom(mockValues.nextGeometry());

		LandschaftselementEntity landschaftselementEntity = new LandschaftselementEntity();

		// When
		landschaftselementServiceMapper.mapLandschaftselementToLandschaftselementEntity(landschaftselement,
				landschaftselementEntity);

		// Then
		assertEquals(landschaftselement.getFlek(), landschaftselementEntity.getFlek());
		assertEquals(landschaftselement.getTyp(), landschaftselementEntity.getTyp());
		assertEquals(landschaftselement.getTypTxt(), landschaftselementEntity.getTypTxt());
		assertEquals(landschaftselement.getFlaeche(), landschaftselementEntity.getFlaeche());
		assertEquals(landschaftselement.getCcRelevan(), landschaftselementEntity.getCcRelevan());
		assertEquals(landschaftselement.getStand(), landschaftselementEntity.getStand());
		assertEquals(landschaftselement.getGeom(), landschaftselementEntity.getGeom());
	}

}