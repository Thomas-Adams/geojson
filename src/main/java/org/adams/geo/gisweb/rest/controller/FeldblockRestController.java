/*
 * Created on 24 Mï¿½r 2018 ( Time 16:32:44 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.rest.controller;

import java.util.List;

import javax.annotation.Resource;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.adams.geo.gisweb.business.service.FeldblockService;
import org.adams.geo.gisweb.data.dto.Feldblock;
import org.adams.geo.gisweb.geojson.FeldblockGeoJsonSerializer;
import org.adams.geo.gisweb.geojson.GeometryMapper;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

/**
 * Spring MVC controller for 'Feldblock' management.
 */
@RestController
public class FeldblockRestController {

	@Resource
	GeometryMapper geometryMapper;

	@Resource
	private FeldblockService feldblockService;

	@RequestMapping(value = "/feldblock", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> findAll() throws JsonProcessingException {
		List<Feldblock> feldblocks = feldblockService.findAll();
		String result = geometryMapper.writeValueAsString(feldblocks);
		return new ResponseEntity<String>(result, HttpStatus.OK);
	}

	@RequestMapping(value = "/feldblock/{gid}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Feldblock findOne(@PathVariable("gid") final Integer gid) {
		return feldblockService.findById(gid);
	}

	@RequestMapping(value = "/feldblock", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Feldblock create(@RequestBody final Feldblock feldblock) {
		return feldblockService.create(feldblock);
	}

	@RequestMapping(value = "/feldblock/{gid}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Feldblock update(@PathVariable("gid") final Integer gid, @RequestBody final Feldblock feldblock) {
		return feldblockService.update(feldblock);
	}

	@RequestMapping(value = "/feldblock/{gid}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("gid") final Integer gid) {
		feldblockService.delete(gid);
	}

}
