/*
 * Created on 24 Mar 2018 ( Time 16:32:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.web.common;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.context.MessageSource;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.servlet.support.RequestContextUtils;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

public abstract class AbstractController {

	protected static final String MODE = "mode";
	protected static final String MODE_CREATE = "create";
	protected static final String MODE_UPDATE = "update";
	protected static final String SAVE_ACTION = "saveAction";

	private static final String DATE_FORMAT_PATTERN = "yyyy-MM-dd";

	private final String entityName;
	private final Logger logger;

	@Resource
	private MessageSource messageSource;

	private Map<Locale, CustomDateEditor> customDateEditorByLocales = new HashMap<>();

	public AbstractController(final Class<? extends AbstractController> controllerClass, final String entityName) {
		super();
		this.entityName = entityName;
		logger = LoggerFactory.getLogger(controllerClass);
	}

	@InitBinder
	public void initBinder(final WebDataBinder binder, final HttpServletRequest request) {
		Locale locale = RequestContextUtils.getLocale(request);
		binder.registerCustomEditor(Date.class, getCustomDateEditor(locale));
	}

	private CustomDateEditor getCustomDateEditor(final Locale locale) {
		return customDateEditorByLocales.computeIfAbsent(locale, k -> {
			SimpleDateFormat dateFormat = new SimpleDateFormat(messageSource.getMessage(DATE_FORMAT_PATTERN, null, k));
			return new CustomDateEditor(dateFormat, true);
		});
	}

	protected void log(final String msg) {
		logger.info(msg);
	}

	protected void logContent(final Model model) {
		Map<String, Object> map = model.asMap();
		logger.info("Model content (size = {}) : ", map.size());
		for (Map.Entry<String, Object> entry : map.entrySet()) {
			logger.info(" . '{}' : {}", entry.getKey(), entry.getValue());
		}
	}

	protected void logSessionContent(final HttpSession session) {
		Enumeration<String> enumNames = session.getAttributeNames();
		List<String> names = Collections.list(enumNames);
		logger.info("Session content (size = {}) : ", names.size());
		for (String name : names) {
			logger.info(" . '{}' : {}", name, session.getAttribute(name));
		}
	}

	private static final String URI_SEPARATOR = "/";

	protected String encodeUrlPathSegments(final HttpServletRequest httpServletRequest, final Object... pathSegments) {
		// --- get character encoding
		String characterEncoding = httpServletRequest.getCharacterEncoding();
		if (characterEncoding == null) {
			characterEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;
		}

		// --- encode N segments
		StringBuilder sb = new StringBuilder();
		int n = 0;
		for (Object segment : pathSegments) {
			n++;
			if (n > 1) {
				sb.append(URI_SEPARATOR);
			}
			// --- encode 1 segment
			try {
				String encodedSegment = UriUtils.encodePathSegment(segment.toString(), characterEncoding);
				sb.append(encodedSegment);
			} catch (UnsupportedEncodingException uee) {
				throw new UrlEncodingException("encodePathSegment error", uee);
			}
		}
		return sb.toString();
	}

	/**
	 * Returns "redirect:/entityName"
	 *
	 * @return
	 */
	protected String redirectToList() {
		return "redirect:/" + entityName;
	}

	/**
	 * Returns "redirect:/entityName/form/id1/id2/..."
	 *
	 * @param httpServletRequest
	 * @param idParts
	 * @return
	 */
	protected String redirectToForm(final HttpServletRequest httpServletRequest, final Object... idParts) {
		return "redirect:" + getFormURL(httpServletRequest, idParts);
	}

	/**
	 * Returns "/entityName/form/id1/id2/..."
	 *
	 * @param httpServletRequest
	 * @param idParts
	 * @return
	 */
	protected String getFormURL(final HttpServletRequest httpServletRequest, final Object... idParts) {
		return "/" + entityName + "/form/" + encodeUrlPathSegments(httpServletRequest, idParts);
	}

}