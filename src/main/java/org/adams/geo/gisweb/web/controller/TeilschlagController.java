/*
 * Created on 24 Mï¿½r 2018 ( Time 16:32:44 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.web.controller;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

//--- Services
import org.adams.geo.gisweb.business.service.TeilschlagService;
import org.adams.geo.gisweb.data.dto.Teilschlag;
//--- Common classes
import org.adams.geo.gisweb.web.common.AbstractController;
import org.adams.geo.gisweb.web.common.FormMode;
import org.adams.geo.gisweb.web.common.Message;
import org.adams.geo.gisweb.web.common.MessageHelper;
import org.adams.geo.gisweb.web.common.MessageType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

/**
 * Spring MVC controller for 'Teilschlag' management.
 */
@Controller
@RequestMapping("/teilschlag")
public class TeilschlagController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "teilschlag";
	private static final String MAIN_LIST_NAME = "list";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM = "teilschlag/form";
	private static final String JSP_LIST = "teilschlag/list";

	// --- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE = "/teilschlag/create";
	private static final String SAVE_ACTION_UPDATE = "/teilschlag/update";

	// --- Main entity service
	@Resource
	private TeilschlagService teilschlagService; // Injected by Spring
	// --- Other service(s)

	@Resource
	private MessageHelper messageHelper;

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public TeilschlagController() {
		super(TeilschlagController.class, MAIN_ENTITY_NAME);
		log("TeilschlagController created.");
	}

	// --------------------------------------------------------------------------------------
	// Spring MVC model management
	// --------------------------------------------------------------------------------------

	/**
	 * Populates the Spring MVC model with the given entity and eventually other
	 * useful data
	 * 
	 * @param model
	 * @param teilschlag
	 */
	private void populateModel(final Model model, final Teilschlag teilschlag, final FormMode formMode) {
		// --- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, teilschlag);
		if (formMode == FormMode.CREATE) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
			// --- Other data useful in this screen in "create" mode (all fields)
		} else if (formMode == FormMode.UPDATE) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
			// --- Other data useful in this screen in "update" mode (only non-pk fields)
		}
	}

	// --------------------------------------------------------------------------------------
	// Request mapping
	// --------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of Teilschlag found in the database
	 * 
	 * @param model
	 *            Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(final Model model) {
		log("Action 'list'");
		List<Teilschlag> list = teilschlagService.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new Teilschlag
	 * 
	 * @param model
	 *            Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(final Model model) {
		log("Action 'formForCreate'");
		// --- Populates the model with a new instance
		Teilschlag teilschlag = new Teilschlag();
		populateModel(model, teilschlag, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing Teilschlag
	 * 
	 * @param model
	 *            Spring MVC model
	 * @param gid
	 *            primary key element
	 * @return
	 */
	@RequestMapping(value = "/form/{gid}")
	public String formForUpdate(final Model model, @PathVariable("gid") final Integer gid) {
		log("Action 'formForUpdate'");
		// --- Search the entity by its primary key and stores it in the model
		Teilschlag teilschlag = teilschlagService.findById(gid);
		populateModel(model, teilschlag, FormMode.UPDATE);
		return JSP_FORM;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param teilschlag
	 *            entity to be created
	 * @param bindingResult
	 *            Spring MVC binding result
	 * @param model
	 *            Spring MVC model
	 * @param redirectAttributes
	 *            Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create") // GET or POST
	public String create(@Valid final Teilschlag teilschlag, final BindingResult bindingResult, final Model model,
			final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {
				Teilschlag teilschlagCreated = teilschlagService.create(teilschlag);
				model.addAttribute(MAIN_ENTITY_NAME, teilschlagCreated);

				// ---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, "save.ok"));
				return redirectToForm(httpServletRequest, teilschlag.getGid());
			} else {
				populateModel(model, teilschlag, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch (Exception e) {
			log("Action 'create' : Exception - " + e.getMessage());
			messageHelper.addException(model, "teilschlag.error.create", e);
			populateModel(model, teilschlag, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param teilschlag
	 *            entity to be updated
	 * @param bindingResult
	 *            Spring MVC binding result
	 * @param model
	 *            Spring MVC model
	 * @param redirectAttributes
	 *            Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update") // GET or POST
	public String update(@Valid final Teilschlag teilschlag, final BindingResult bindingResult, final Model model,
			final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) {
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {
				// --- Perform database operations
				Teilschlag teilschlagSaved = teilschlagService.update(teilschlag);
				model.addAttribute(MAIN_ENTITY_NAME, teilschlagSaved);
				// --- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, "save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, teilschlag.getGid());
			} else {
				log("Action 'update' : binding errors");
				populateModel(model, teilschlag, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch (Exception e) {
			messageHelper.addException(model, "teilschlag.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage());
			populateModel(model, teilschlag, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param redirectAttributes
	 * @param gid
	 *            primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{gid}") // GET or POST
	public String delete(final RedirectAttributes redirectAttributes, @PathVariable("gid") final Integer gid) {
		log("Action 'delete'");
		try {
			teilschlagService.delete(gid);
			// --- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, "delete.ok"));
		} catch (Exception e) {
			messageHelper.addException(redirectAttributes, "teilschlag.error.delete", e);
		}
		return redirectToList();
	}

}
