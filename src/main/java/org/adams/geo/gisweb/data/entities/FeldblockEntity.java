/*
 * Created on 23 Mï¿½r 2018 ( Time 23:05:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package org.adams.geo.gisweb.data.entities;

import java.io.Serializable;
import java.math.BigDecimal;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.JsonNode;
import com.vividsolutions.jts.io.WKTWriter;
import com.vladmihalcea.hibernate.type.json.JsonNodeStringType;
import org.adams.geo.gisweb.config.ReferenceSystems;

import com.vividsolutions.jts.geom.Geometry;
import org.geotools.geometry.jts.WKTWriter2;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

/**
 * Persistent class for entity stored in table "feldblock"
 *
 * @author Telosys Tools Generator
 */

@Entity
@Table(name = "feldblock", schema = "public")
@TypeDef(
        name = "json-node",
        typeClass = JsonNodeStringType.class
)
// Define named queries here
@NamedQueries({@NamedQuery(name = "FeldblockEntity.countAll", query = "SELECT COUNT(x) FROM FeldblockEntity x")})
public class FeldblockEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    // ----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    // ----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "feldblock_gid_seq")
    @SequenceGenerator(name = "feldblock_gid_seq", sequenceName = "feldblock_gid_seq", allocationSize = 1)
    @Column(name = "gid", nullable = false, updatable = false, insertable = true)
    private Integer gid;

    // ----------------------------------------------------------------------
    // ENTITY DATA FIELDS
    // ----------------------------------------------------------------------
    @Column(name = "flik", length = 16)
    private String flik;

    @Column(name = "flik_vorg", length = 16)
    private String flikVorg;

    @Column(name = "stand", length = 10)
    private String stand;

    @Column(name = "ant_jahr")
    private Short antJahr;

    @Column(name = "bnk", length = 6)
    private String bnk;

    @Column(name = "bnk_txt", length = 50)
    private String bnkTxt;

    @Column(name = "flaeche", columnDefinition = "double precision")
    private Double flaeche;

    @Column(name = "se_sdo_row", columnDefinition = "BIGINT")
    private Long seSdoRow;

    @Column(name = "shape_area", columnDefinition = "NUMERIC")
    private BigDecimal shapeArea;

    @Column(name = "shape_len", columnDefinition = "NUMERIC")
    private BigDecimal shapeLen;

    @Column(name = "geom", columnDefinition = "MultiPolygon(" + ReferenceSystems.SRID_3044 + ")")
    private Geometry geom;

    @Column(name = "osm_geom", columnDefinition = "MultiPolygon(" + ReferenceSystems.SRID_4326 + ")")
    private Geometry osmGeom;

    @Type( type = "json-node" )
    @Column(name = "json", columnDefinition = "json")
    private JsonNode json;



    // ----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    // ----------------------------------------------------------------------

    // ----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    // ----------------------------------------------------------------------
    public FeldblockEntity() {
        super();
    }

    // ----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    // ----------------------------------------------------------------------
    public void setGid(final Integer gid) {
        this.gid = gid;
    }

    public Integer getGid() {
        return gid;
    }

    // ----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    // ----------------------------------------------------------------------
    // --- DATABASE MAPPING : flik ( varchar )
    public void setFlik(final String flik) {
        this.flik = flik;
    }

    public String getFlik() {
        return flik;
    }

    // --- DATABASE MAPPING : stand ( varchar )
    public void setStand(final String stand) {
        this.stand = stand;
    }

    public String getStand() {
        return stand;
    }

    // --- DATABASE MAPPING : ant_jahr ( int2 )
    public void setAntJahr(final Short antJahr) {
        this.antJahr = antJahr;
    }

    public Short getAntJahr() {
        return antJahr;
    }

    // --- DATABASE MAPPING : bnk ( varchar )
    public void setBnk(final String bnk) {
        this.bnk = bnk;
    }

    public String getBnk() {
        return bnk;
    }

    // --- DATABASE MAPPING : bnk_txt ( varchar )
    public void setBnkTxt(final String bnkTxt) {
        this.bnkTxt = bnkTxt;
    }

    public String getBnkTxt() {
        return bnkTxt;
    }

    // --- DATABASE MAPPING : flaeche ( float8 )
    public void setFlaeche(final Double flaeche) {
        this.flaeche = flaeche;
    }

    public Double getFlaeche() {
        return flaeche;
    }

    // --- DATABASE MAPPING : geom ( geometry )
    public void setGeom(final Geometry geom) {
        this.geom = geom;
    }

    public Geometry getGeom() {
        return geom;
    }

    public String getFlikVorg() {
        return flikVorg;
    }

    public void setFlikVorg(String flikVorg) {
        this.flikVorg = flikVorg;
    }

    public Long getSeSdoRow() {
        return seSdoRow;
    }

    public void setSeSdoRow(Long seSdoRow) {
        this.seSdoRow = seSdoRow;
    }

    public BigDecimal getShapeArea() {
        return shapeArea;
    }

    public void setShapeArea(BigDecimal shapeArea) {
        this.shapeArea = shapeArea;
    }

    public BigDecimal getShapeLen() {
        return shapeLen;
    }

    public void setShapeLen(BigDecimal shapeLen) {
        this.shapeLen = shapeLen;
    }

    public Geometry getOsmGeom() {
        return osmGeom;
    }

    public void setOsmGeom(Geometry osmGeom) {
        this.osmGeom = osmGeom;
    }

    public JsonNode getJson() {
        return json;
    }

    public void setJson(JsonNode json) {
        this.json = json;
    }

    // ----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    // ----------------------------------------------------------------------

    // ----------------------------------------------------------------------
    // toString METHOD
    // ----------------------------------------------------------------------

    @Override
    public String toString() {
        WKTWriter2 wkt = new WKTWriter2();
        return "FeldblockEntity{" +
                "gid=" + gid +
                ", flik='" + flik + '\'' +
                ", flikVorg='" + flikVorg + '\'' +
                ", stand='" + stand + '\'' +
                ", antJahr=" + antJahr +
                ", bnk='" + bnk + '\'' +
                ", bnkTxt='" + bnkTxt + '\'' +
                ", flaeche=" + flaeche +
                ", seSdoRow=" + seSdoRow +
                ", shapeArea=" + shapeArea +
                ", shapeLen=" + shapeLen +
                ", geom=" + wkt.write(geom) +
                ", osmGeom=" + wkt.write(osmGeom) +
                ", json=" + json +
                '}';
    }
}
