/*
 * Created on 23 Mï¿½r 2018 ( Time 23:37:27 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.adams.geo.gisweb.business.service.TeilschlagService;
import org.adams.geo.gisweb.business.service.mapping.TeilschlagServiceMapper;
import org.adams.geo.gisweb.data.dto.Teilschlag;
import org.adams.geo.gisweb.data.entities.TeilschlagEntity;
import org.adams.geo.gisweb.data.repository.TeilschlagRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.querydsl.core.types.Predicate;

/**
 * Implementation of TeilschlagService
 */
@Component
@Transactional
public class TeilschlagServiceImpl implements TeilschlagService {

	@Resource
	private TeilschlagRepository teilschlagRepository;

	@Resource
	private TeilschlagServiceMapper teilschlagServiceMapper;

	@Override
	public Teilschlag findById(final Integer gid) {
		TeilschlagEntity teilschlagEntity = teilschlagRepository.findOne(gid);
		return teilschlagServiceMapper.mapTeilschlagEntityToTeilschlag(teilschlagEntity);
	}

	@Override
	public List<Teilschlag> findAll() {
		Iterable<TeilschlagEntity> entities = teilschlagRepository.findAll();
		List<Teilschlag> beans = new ArrayList<>();
		for (TeilschlagEntity teilschlagEntity : entities) {
			beans.add(teilschlagServiceMapper.mapTeilschlagEntityToTeilschlag(teilschlagEntity));
		}
		return beans;
	}

	@Override
	public Page<Teilschlag> findAll(final Predicate predicate, final Pageable pageable) {
		Page<TeilschlagEntity> entities = teilschlagRepository.findAll(predicate, pageable);
		List<Teilschlag> beans = new ArrayList<>();
		for (TeilschlagEntity teilschlagEntity : entities) {
			beans.add(teilschlagServiceMapper.mapTeilschlagEntityToTeilschlag(teilschlagEntity));
		}
		return new PageImpl<>(beans);
	}

	@Override
	public Teilschlag save(final Teilschlag teilschlag) {
		return update(teilschlag);
	}

	@Override
	public Teilschlag create(final Teilschlag teilschlag) {
		if (teilschlag.getGid() != null) {
			TeilschlagEntity teilschlagEntity = teilschlagRepository.findOne(teilschlag.getGid());
			if (teilschlagEntity != null) {
				throw new IllegalStateException("already.exists");
			}
		}
		TeilschlagEntity teilschlagEntity = new TeilschlagEntity();
		teilschlagServiceMapper.mapTeilschlagToTeilschlagEntity(teilschlag, teilschlagEntity);
		TeilschlagEntity teilschlagEntitySaved = teilschlagRepository.save(teilschlagEntity);
		return teilschlagServiceMapper.mapTeilschlagEntityToTeilschlag(teilschlagEntitySaved);
	}

	@Override
	public Teilschlag update(final Teilschlag teilschlag) {
		TeilschlagEntity teilschlagEntity = teilschlagRepository.findOne(teilschlag.getGid());
		teilschlagServiceMapper.mapTeilschlagToTeilschlagEntity(teilschlag, teilschlagEntity);
		TeilschlagEntity teilschlagEntitySaved = teilschlagRepository.save(teilschlagEntity);
		return teilschlagServiceMapper.mapTeilschlagEntityToTeilschlag(teilschlagEntitySaved);
	}

	@Override
	public void delete(final Integer gid) {
		teilschlagRepository.delete(gid);
	}

	public TeilschlagRepository getTeilschlagJpaRepository() {
		return teilschlagRepository;
	}

	public void setTeilschlagJpaRepository(final TeilschlagRepository teilschlagRepository) {
		this.teilschlagRepository = teilschlagRepository;
	}

	public TeilschlagServiceMapper getTeilschlagServiceMapper() {
		return teilschlagServiceMapper;
	}

	public void setTeilschlagServiceMapper(final TeilschlagServiceMapper teilschlagServiceMapper) {
		this.teilschlagServiceMapper = teilschlagServiceMapper;
	}

}
