/*
 * Created on 23 Mï¿½r 2018 ( Time 23:37:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.adams.geo.gisweb.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.adams.geo.gisweb.business.service.FeldblockService;
import org.adams.geo.gisweb.business.service.mapping.FeldblockServiceMapper;
import org.adams.geo.gisweb.data.dto.Feldblock;
import org.adams.geo.gisweb.data.entities.FeldblockEntity;
import org.adams.geo.gisweb.data.repository.FeldblockRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.querydsl.core.types.Predicate;

/**
 * Implementation of FeldblockService
 */
@Component
@Transactional
public class FeldblockServiceImpl implements FeldblockService {

	@Resource
	private FeldblockRepository feldblockRepository;

	@Resource
	private FeldblockServiceMapper feldblockServiceMapper;

	@Override
	public Feldblock findById(final Integer gid) {
		FeldblockEntity feldblockEntity = feldblockRepository.findOne(gid);
		return feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntity);
	}

	@Override
	public List<Feldblock> findAll() {
		Iterable<FeldblockEntity> entities = feldblockRepository.findAll();
		List<Feldblock> beans = new ArrayList<>();
		for (FeldblockEntity feldblockEntity : entities) {
			beans.add(feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntity));
		}
		return beans;
	}

	@Override
	public Feldblock save(final Feldblock feldblock) {
		return update(feldblock);
	}

	@Override
	public Feldblock create(final Feldblock feldblock) {
		if (feldblock.getGid() != null) {
			FeldblockEntity feldblockEntity = feldblockRepository.findOne(feldblock.getGid());
			if (feldblockEntity != null) {
				throw new IllegalStateException("already.exists");
			}
		}
		FeldblockEntity feldblockEntity = new FeldblockEntity();
		feldblockServiceMapper.mapFeldblockToFeldblockEntity(feldblock, feldblockEntity);
		FeldblockEntity feldblockEntitySaved = feldblockRepository.save(feldblockEntity);
		return feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntitySaved);
	}

	@Override
	public Feldblock update(final Feldblock feldblock) {
		FeldblockEntity feldblockEntity = feldblockRepository.findOne(feldblock.getGid());
		feldblockServiceMapper.mapFeldblockToFeldblockEntity(feldblock, feldblockEntity);
		FeldblockEntity feldblockEntitySaved = feldblockRepository.save(feldblockEntity);
		return feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntitySaved);
	}

	@Override
	public void delete(final Integer gid) {
		feldblockRepository.delete(gid);
	}

	@Override
	public Page<Feldblock> findAll(final Predicate predicate, final Pageable pageable) {
		Page<FeldblockEntity> entities = feldblockRepository.findAll(predicate, pageable);
		List<Feldblock> beans = new ArrayList<>();
		for (FeldblockEntity feldblockEntity : entities) {
			beans.add(feldblockServiceMapper.mapFeldblockEntityToFeldblock(feldblockEntity));
		}
		return new PageImpl<>(beans);
	}

	public FeldblockRepository getFeldblockJpaRepository() {
		return feldblockRepository;
	}

	public void setFeldblockJpaRepository(final FeldblockRepository feldblockRepository) {
		this.feldblockRepository = feldblockRepository;
	}

	public FeldblockServiceMapper getFeldblockServiceMapper() {
		return feldblockServiceMapper;
	}

	public void setFeldblockServiceMapper(final FeldblockServiceMapper feldblockServiceMapper) {
		this.feldblockServiceMapper = feldblockServiceMapper;
	}

}
